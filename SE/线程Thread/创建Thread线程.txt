线程创建过程：

方法一：
	1.自定义一个类继承Thread 类

	2.重写Thread类的run方法，把自定义的线程任务写入run()
		疑问：重写run方法的目的
		每个线程都有自己的任务，JVM创建的主线程任务在main()中，自定义的线程在run()

	3.创建Thread子类对象（实例化） ，并调用start();
		run()不直接调用（否则是普通方法），实例化后，调用start()才开启线程

方法二：
	1.自定义类实现Runnable接口

	2.实现run()方法，把自定义线程的任务定义到run方法上

	3.创建Runnable实现类对象

	4.创建Thread对象，并把Runnable对象对象作为实参传递（自定义的线程名字可有可无）

	5.调用Thread对象的start()开启线程

问题：Runnable实现类的对象是线程类吗？
	Runnable实现类并不是一个线程对象！只是实现Runnable接口的对象而已
	只有是Thread或者Thread的子类才是线程对象

=======================================================
package com.arr;

import java.io.IOException;
import java.util.Arrays;

import com.sun.xml.internal.fastinfoset.sax.Properties;
class amn extends Thread{			//创建子类继承线程类
	@Override
	public void run() {				//重写run()
			Thread amn = new Thread("AMN");
			for(int i =0;i<100;i++){
				System.out.println(amn.getName()+i);
			}
			
	}
	
	
}


public class test {
		public static void main(String[] args) {
			amn amn =new amn();				//实例化对象
			amn.start();					//调用start()
			
			Thread thread = new Thread();
			thread.setName("main");
			for(int i=0;i<100;i++){
			System.out.println(thread.getName()+i);
			}
			thread.start();
		}
	
	

}
=====================================================
package com.arr;


public class myThread1 implements Runnable {  //实现Runnable接口

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		myThread1 myThread1=new myThread1();    //创建线程(接口)类对象
		Thread thread1 = new Thread(myThread1); //传参创建线程1    Thread类构造函数重载  
		Thread thread2 = new Thread(myThread1,"mythread2");//传参创建线程1    Thread类构造函数重载
		thread1.start();		//开启线程
		thread2.start();

	}
	@Override
	public void run() {				//重写run()函数
		
		int num =50;

		while(num>0){
			synchronized("pp"){
			System.out.println(Thread.currentThread().getName()+" "+num);
			num--;
		}
		}
		
	}
	
	

}

